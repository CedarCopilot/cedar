---
description:
globs:
alwaysApply: true
---

# Cedar OS Import Rules

## Import Guidelines

When working with imports in this Cedar OS project, follow these strict rules based on file location:

### 1. Files in `packages/cedar-os/` importing from outside

- **Rule**: Use `import from "cedar-os"` when importing Cedar OS exports from external files
- **Example**:

  ```tsx
  // ❌ Wrong
  import { useCedarStore } from '@/store/CedarStore';

  // ✅ Correct (when importing from outside cedar-os)
  import { useCedarStore } from 'cedar-os';
  ```

### 2. Files within `packages/cedar-os/` importing from within the same package

- **Rule**: Use absolute imports with `@/` prefix, where `@` maps to `packages/cedar-os/src/`
- **Examples**:

  ```tsx
  // In packages/cedar-os/src/components/CedarCopilot.tsx
  import { createStateSlice } from '@/store/stateSlice/stateSlice';
  import { useCedarEditor } from '@/components/chatInput/useCedarEditor';

  // ❌ Wrong
  import { createStateSlice } from '../store/stateSlice/stateSlice';
  import { useCedarEditor } from './chatInput/useCedarEditor';
  ```

### 3. Files in `packages/cedar-os-components/`

- **Rule**: Use absolute imports with `@/` prefix, where `@` maps to `packages/cedar-os-components/`
- **Examples**:

  ```tsx
  // In packages/cedar-os-components/chatComponents/FloatingCedarChat.tsx
  import { ChatInput } from '@/chatInput/ChatInput';
  import { FloatingContainer } from '@/structural/FloatingContainer';

  // When importing from cedar-os package
  import { useCedarStore, useSpell } from 'cedar-os';
  ```

### 4. Files in the base Next.js app (`src/`)

- **Rule**:
  - Use `import from "cedar-os"` for Cedar OS package imports
  - Use `@/` for local app imports, where `@` maps to `src/`
- **Examples**:
  ```tsx
  // In src/app/examples/product-roadmap/page.tsx
  import { useCedarStore } from 'cedar-os';
  import { Navbar } from '@/components/Navbar';
  import { SunlitBackground } from '@/components/SunlitBackground/SunlitBackground';
  ```

## Path Mappings Summary

| Location                        | `@` maps to                     | External Cedar imports |
| ------------------------------- | ------------------------------- | ---------------------- |
| `packages/cedar-os/`            | `packages/cedar-os/src/`        | N/A (internal)         |
| `packages/cedar-os-components/` | `packages/cedar-os-components/` | `from 'cedar-os'`      |
| `src/` (Next.js app)            | `src/`                          | `from 'cedar-os'`      |

## Additional Rules

1. **Never use relative imports** (e.g., `../`, `./`) except for files in the same directory
2. **Always prefer named imports** over default imports when possible
3. **Group imports** in this order:
   - React and external libraries
   - Cedar OS package imports (`from 'cedar-os'`)
   - Local absolute imports (`@/...`)
   - Type imports

## Example Import Organization

```tsx
// External libraries
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';

// Cedar OS package (when outside cedar-os)
import { useCedarStore, useSpell, Hotkey } from 'cedar-os';

// Local absolute imports
import { ChatInput } from '@/chatInput/ChatInput';
import { Container3D } from '@/containers/Container3D';

// Type imports
import type { SpellState, ActivationConditions } from 'cedar-os';
```

## VSCode Configuration

Ensure your `tsconfig.json` files have the correct path mappings:

**packages/cedar-os/tsconfig.json:**

```json
{
	"compilerOptions": {
		"paths": {
			"@/*": ["./src/*"]
		}
	}
}
```

**packages/cedar-os-components/tsconfig.json:**

```json
{
	"compilerOptions": {
		"paths": {
			"@/*": ["./*"]
		}
	}
}
```

**Root tsconfig.json:**

```json
{
	"compilerOptions": {
		"paths": {
			"@/*": ["./src/*"],
			"cedar-os": ["./packages/cedar-os/src"],
			"cedar-os/*": ["./packages/cedar-os/src/*"]
		}
	}
}
```
